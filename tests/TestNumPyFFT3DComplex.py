import sys
import numpy as np

#-------------- initialize ------------
print("Initializing")
np.set_printoptions(precision=10)

data_init = [
 -0.1635032683+0.8110690980j, -0.0405400687-0.3637939690j,
 -0.0089541085-0.7288956966j,  0.961865777 +0.4060443942j,
  0.6226145044+0.8452404454j,  0.5411463282-0.0627679490j,
 -0.9693732485-0.9499292596j,  0.5224303106-0.5839273136j,
 -0.3447755023-0.4197040933j,  0.4940856956-0.4183871742j,
 -0.7004420545-0.6882638505j,  0.8146353239+0.1013541518j,
  0.9620226651-0.5889567939j,  0.3434239009+0.1706384337j,
  0.0913065632+0.3684459488j, -0.5342741345-0.7536072852j,
  0.8617852131-0.7329472429j,  0.9497634322+0.7397160288j,
 -0.1661953773-0.1572153018j, -0.7370987097+0.0374939326j,
  0.2351758146-0.4826984599j,  0.088672368 +0.2273836194j,
 -0.2984519416-0.7871247207j, -0.7900221425+0.6089911949j,
 -0.122475026 +0.2386835201j,  0.7145724817+0.4987837298j,
  0.1659934706-0.7761889359j, -0.0440122022-0.0980303281j,
 -0.6529576556-0.5702515540j, -0.331532641 -0.1474882433j,
 -0.0698514944-0.4268140909j, -0.9324044806-0.5513195217j,
 -0.9822079035+0.6878822424j,  0.3643357687+0.9003829004j,
 -0.0106640643-0.3151330242j, -0.0357722986-0.9447605119j,
  0.9309176567-0.9950659760j, -0.0016633233-0.0901041639j,
  0.0022255336-0.9070624083j, -0.6161077971+0.5855078935j,
 -0.2609157228-0.4955934519j,  0.3622729861-0.3436689200j,
 -0.2638397466-0.4244526880j, -0.7895719819+0.4714340937j,
  0.1605312528-0.5276342035j, -0.6727767096+0.1929227653j,
 -0.8211839048+0.3575046233j,  0.0437074112-0.1773034289j,
 -0.9007289997-0.1719159753j, -0.5065689519-0.0810386444j,
 -0.0334737879-0.6076272720j, -0.3003188629-0.7740487229j,
 -0.7292275949-0.3523647693j,  0.1555184893+0.6752701102j,
  0.1060268292+0.9655767429j, -0.3232550322-0.9330414915j,
  0.0519991505-0.5462597072j, -0.1468951143+0.2767532169j,
 -0.0529965958+0.9490296469j, -0.0385422168+0.5787464737j]

data_k_answer = [
 -3.8465457376 -7.2805319371j,  0.0671209716 +6.0678667687j,
  0.5921491036 -2.2496331674j,  3.9938793799 -2.1303505803j,
  0.9984423789 +2.3497705907j, -4.2234916919 +2.6213330847j,
 -2.293165026  -6.8467445123j,  5.3876129616 -2.215959756j,
 -3.8491723315 +2.3308782561j,  7.8760503334 +3.365510609j,
  4.5694542911 -5.0046915783j, -0.7975382994 +0.5183186955j,
  3.5608506716 -2.8906238018j, -7.0706416083 +0.1040548927j,
  2.5884910331 -4.3714854865j, -0.2821599507 -4.8071723303j,
  0.2719059946 +1.7212767637j,  8.1814926627 +3.5084691437j,
 -0.2969939241 -1.2524200662j, -5.124283101  +2.879697747j,
 -7.2011456506 +6.5441289628j, -1.6785608773 +2.883732263j,
  0.6909818315 +1.8674170957j,  0.7193916316 -5.7615633736j,
  0.3318243741 -4.3343780728j,  2.6062816943 +1.8441623495j,
 -6.6103852856 +3.7123812707j,  0.6490228927 -0.7320743633j,
 -0.1429825299 +0.5940679779j,  6.7373370623 -5.0595941231j,
 -4.8849176929 -3.7391719107j, -6.4015000483-11.6596332975j,
 -3.4210504008 -0.3811734284j, -0.2425524228 +0.7840047881j,
  0.6470993913 +9.7001499487j, -5.8493488021 -1.5748315385j,
  3.5095032591 +0.0642255270j,  4.3018280799 +1.4700662421j,
  1.2121815767 +1.0242642919j, 10.709832195  +2.8396157821j,
  1.6385734643 +2.8564140072j,  0.4573314638+11.9374969229j,
 -1.6042265395 +2.1635228649j, -3.7223344043 +0.3141137862j,
  2.8378292867 +1.4327775111j, -5.7107224937 +1.5730798876j,
  5.3002846436 +7.7000643364j, -1.4673497269 +6.0998828162j,
  5.0903158774 +4.1815022018j, -0.4220263037 -2.9008994341j,
 -1.0648233697 +3.2909842309j, -1.2079007263 +5.6029437623j,
 -2.0912153734 -1.6679287909j, -1.2355439938 -0.2359937051j,
 -9.6138041196 -2.4171926350j,  0.1480323383 +5.9528542443j,
  1.2066988104 +4.9965615080j, -8.3196783842 +7.3401111696j,
  1.8959891548 +5.7224996013j,  2.0880759053 -1.7820081353j]

# for i in range(len(data_init)):
#     print(f"{{{data_init[i].real},{data_init[i].imag}}}, " , end="")
#     if i % 2 ==1:
#         print("")

# print("")
# for i in range(len(data_k_answer)):
#     print(f"{{{data_k_answer[i].real},{data_k_answer[i].imag}}}, " , end="")
#     if i % 2 ==1:
#         print("")

data_init = np.reshape(data_init, (5,4,3))
data_k_answer = np.reshape(data_k_answer, (5,4,3))
#---------------- Forward --------------------
print("Running FFT 3D")
print("If error is less than 1.0e-7, it is ok!")
data_k = np.fft.fftn(data_init)
error = np.max(np.absolute(data_k - data_k_answer))
print("FFT Forward Error: ", error)
if(np.isnan(error) or error > 1e-7):
    sys.exit(-1)

#--------------- Backward --------------------
data_r = np.fft.ifftn(data_k_answer)
error = np.max(np.absolute(data_r - data_init))
print("FFT Backward Error: ", error)
if(np.isnan(error) or error > 1e-7):
    sys.exit(-1)

"""
#--------------- Test with large array --------------------
data_init = np.random.uniform(-1.0,1.0, size=(89,101,119))
data_k = np.fft.rfftn(data_init)
data_r = np.fft.irfftn(data_k, (data_init.shape))
error = np.max(np.absolute(data_r - data_init))
print("Test with lage array, Error: ", error)
if(np.isnan(error) or error > 1e-7):
    sys.exit(-1)
"""
