#include <iostream>
#include <cmath>
#include <complex>
#include <algorithm>
#include <random>

#include "Exception.h"
#include "FFT.h"
#ifdef USE_CPU_MKL
#include "MklFFT.h"
#endif

int main()
{
    try
    {
        const int II{5};
        const int JJ{4};
        const int KK{3};

        const int M{II*JJ*KK};

        double error;
        std::complex<double> data_r[M], data_k[M];
        std::array<double, M> diff_sq_cplx;

        std::complex<double> data_init[M] =
        {
            {-0.1635032683,0.811069098}, {-0.0405400687,-0.363793969}, 
            {-0.0089541085,-0.7288956966}, {0.961865777,0.4060443942}, 
            {0.6226145044,0.8452404454}, {0.5411463282,-0.062767949}, 
            {-0.9693732485,-0.9499292596}, {0.5224303106,-0.5839273136}, 
            {-0.3447755023,-0.4197040933}, {0.4940856956,-0.4183871742}, 
            {-0.7004420545,-0.6882638505}, {0.8146353239,0.1013541518}, 
            {0.9620226651,-0.5889567939}, {0.3434239009,0.1706384337}, 
            {0.0913065632,0.3684459488}, {-0.5342741345,-0.7536072852}, 
            {0.8617852131,-0.7329472429}, {0.9497634322,0.7397160288}, 
            {-0.1661953773,-0.1572153018}, {-0.7370987097,0.0374939326}, 
            {0.2351758146,-0.4826984599}, {0.088672368,0.2273836194}, 
            {-0.2984519416,-0.7871247207}, {-0.7900221425,0.6089911949}, 
            {-0.122475026,0.2386835201}, {0.7145724817,0.4987837298}, 
            {0.1659934706,-0.7761889359}, {-0.0440122022,-0.0980303281}, 
            {-0.6529576556,-0.570251554}, {-0.331532641,-0.1474882433}, 
            {-0.0698514944,-0.4268140909}, {-0.9324044806,-0.5513195217}, 
            {-0.9822079035,0.6878822424}, {0.3643357687,0.9003829004}, 
            {-0.0106640643,-0.3151330242}, {-0.0357722986,-0.9447605119}, 
            {0.9309176567,-0.995065976}, {-0.0016633233,-0.0901041639}, 
            {0.0022255336,-0.9070624083}, {-0.6161077971,0.5855078935}, 
            {-0.2609157228,-0.4955934519}, {0.3622729861,-0.34366892}, 
            {-0.2638397466,-0.424452688}, {-0.7895719819,0.4714340937}, 
            {0.1605312528,-0.5276342035}, {-0.6727767096,0.1929227653}, 
            {-0.8211839048,0.3575046233}, {0.0437074112,-0.1773034289}, 
            {-0.9007289997,-0.1719159753}, {-0.5065689519,-0.0810386444}, 
            {-0.0334737879,-0.607627272}, {-0.3003188629,-0.7740487229}, 
            {-0.7292275949,-0.3523647693}, {0.1555184893,0.6752701102}, 
            {0.1060268292,0.9655767429}, {-0.3232550322,-0.9330414915}, 
            {0.0519991505,-0.5462597072}, {-0.1468951143,0.2767532169}, 
            {-0.0529965958,0.9490296469}, {-0.0385422168,0.5787464737}, 
        };
        std::complex<double> data_k_answer[M] =
        {
            {-3.8465457376,-7.2805319371}, {0.0671209716,6.0678667687}, 
            {0.5921491036,-2.2496331674}, {3.9938793799,-2.1303505803}, 
            {0.9984423789,2.3497705907}, {-4.2234916919,2.6213330847}, 
            {-2.293165026,-6.8467445123}, {5.3876129616,-2.215959756}, 
            {-3.8491723315,2.3308782561}, {7.8760503334,3.365510609}, 
            {4.5694542911,-5.0046915783}, {-0.7975382994,0.5183186955}, 
            {3.5608506716,-2.8906238018}, {-7.0706416083,0.1040548927}, 
            {2.5884910331,-4.3714854865}, {-0.2821599507,-4.8071723303}, 
            {0.2719059946,1.7212767637}, {8.1814926627,3.5084691437}, 
            {-0.2969939241,-1.2524200662}, {-5.124283101,2.879697747}, 
            {-7.2011456506,6.5441289628}, {-1.6785608773,2.883732263}, 
            {0.6909818315,1.8674170957}, {0.7193916316,-5.7615633736}, 
            {0.3318243741,-4.3343780728}, {2.6062816943,1.8441623495}, 
            {-6.6103852856,3.7123812707}, {0.6490228927,-0.7320743633}, 
            {-0.1429825299,0.5940679779}, {6.7373370623,-5.0595941231}, 
            {-4.8849176929,-3.7391719107}, {-6.4015000483,-11.6596332975}, 
            {-3.4210504008,-0.3811734284}, {-0.2425524228,0.7840047881}, 
            {0.6470993913,9.7001499487}, {-5.8493488021,-1.5748315385}, 
            {3.5095032591,0.064225527}, {4.3018280799,1.4700662421}, 
            {1.2121815767,1.0242642919}, {10.709832195,2.8396157821}, 
            {1.6385734643,2.8564140072}, {0.4573314638,11.9374969229}, 
            {-1.6042265395,2.1635228649}, {-3.7223344043,0.3141137862}, 
            {2.8378292867,1.4327775111}, {-5.7107224937,1.5730798876}, 
            {5.3002846436,7.7000643364}, {-1.4673497269,6.0998828162}, 
            {5.0903158774,4.1815022018}, {-0.4220263037,-2.9008994341}, 
            {-1.0648233697,3.2909842309}, {-1.2079007263,5.6029437623}, 
            {-2.0912153734,-1.6679287909}, {-1.2355439938,-0.2359937051}, 
            {-9.6138041196,-2.417192635}, {0.1480323383,5.9528542443}, 
            {1.2066988104,4.996561508}, {-8.3196783842,7.3401111696}, 
            {1.8959891548,5.7224996013}, {2.0880759053,-1.7820081353}, 
        };

        //-------------- initialize ------------
        std::cout<< "Initializing" << std::endl;
        std::vector<FFT<std::complex<double>>*> fft_list;
#ifdef USE_CPU_MKL
        fft_list.push_back(new MklFFT<std::complex<double>, 3>({II,JJ,KK}));
#endif
        // For each platform    
        for(auto fft : fft_list){
            for(int i=0; i<M; i++)
                data_r[i] = {0.0, 0.0};
            for(int i=0; i<M; i++)
                data_k[i] = {0.0, 0.0};

            //---------------- Forward --------------------
            std::cout<< "Running FFT<std::complex<double>> 3D" << std::endl;
            fft->forward(data_init, data_k);
            std::cout<< "If error is less than 1.0e-7, it is ok!" << std::endl;
            for(int i=0; i<M; i++){
                diff_sq_cplx[i]  = pow(std::abs(data_k[i].real() - data_k_answer[i].real()),2);
                diff_sq_cplx[i] += pow(std::abs(data_k[i].imag() - data_k_answer[i].imag()),2);
            }
            error = sqrt(*std::max_element(diff_sq_cplx.begin(),diff_sq_cplx.end()));
            std::cout<< "FFT<std::complex<double>> Forward Error: " << error << std::endl;
            if(!std::isfinite(error) || error > 1e-7)
                return -1;

            //--------------- Backward --------------------
            fft->backward(data_k_answer, data_r);
            for(int i=0; i<M; i++){
                diff_sq_cplx[i]  = pow(std::abs(data_r[i].real() - data_init[i].real()),2);
                diff_sq_cplx[i] += pow(std::abs(data_r[i].imag() - data_init[i].imag()),2);
            }
            error = sqrt(*std::max_element(diff_sq_cplx.begin(),diff_sq_cplx.end()));
            std::cout<< "FFT<std::complex<double>> Backward Error: " << error << std::endl;
            if(!std::isfinite(error) || error > 1e-7)
                return -1;
            
            delete fft;
        }
        return 0;
    }
    catch(std::exception& exc)
    {
        std::cout << exc.what() << std::endl;
        return -1;
    }
}